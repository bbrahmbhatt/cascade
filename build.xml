<project name="cascade" default="run-tests" xmlns:mvn="urn:maven-artifact-ant">

  <target name="clean" description="Delete all derived files.">
    <delete dir="target" quiet="true" />
  </target>

  <target name="-setup-maven" unless="pom.version">
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" />
    <mvn:pom id="pom" file="pom.xml" />
    <mvn:dependencies pomRefId="pom" filesetId="compile.fileset" useScope="compile" />
    <mvn:dependencies pomRefid="pom" filesetId="test.fileset" useScope="test" />

    <path id="compile.path">
      <fileset refid="compile.fileset" />
      <path location="target/classes" />
      <path location="src/main/clojure" />
    </path>

    <path id="test.path">
      <fileset refid="test.fileset" />
      <path location="src/test/resources" />
      <path location="src/test/clojure" />
      <!-- Pick up sources in case didn't compile before running tests. -->
      <path location="src/main/clojure" />
      <path location="target/classes" />
      <path location="src/main/resources" />
    </path>

    <property name="jar.file" value="target/cascade-${pom.version}.jar" />
    <property name="slim-jar.file" value="target/cascade-${pom.version}-slim.jar" />
  </target>

  <target name="compile" depends="-setup-maven" description="Compile Clojure sources.">
    <mkdir dir="target/classes" />

    <!-- Seek out the namespaces to compile. Note that this will fail if the actual name of a package includes an underscore, as
    all underscores are converted to dashes. -->
    <pathconvert pathsep=" " property="compile.namespaces">
      <fileset dir="src/main/clojure" includes="**/*.clj" />
      <chainedmapper>
        <packagemapper from="${basedir}/src/main/clojure/*.clj" to="*" />
        <filtermapper>
          <replacestring from="_" to="-" />
        </filtermapper>
      </chainedmapper>
    </pathconvert>

    <java classname="clojure.lang.Compile" classpathref="compile.path">
      <sysproperty key="clojure.compile.path" value="target/classes" />
      <arg line="${compile.namespaces}" />
    </java>

  </target>

  <target name="run-tests" depends="-setup-maven" description="Run unit tests.">
    <!-- For some reason, fork="true" necessary to pick up changes after a compile. Don't understand why. -->
    <java classname="clojure.main" fork="true" classpathref="test.path">
      <arg value="src/test/clojure/all_tests.clj" />
    </java>
  </target>

  <target name="run-test-app" depends="-setup-maven" description="Runs the test integration application.">
    <java fork="true" classname="clojure.main" classpathref="test.path">
      <arg value="src/test/clojure/test-app.clj" />
      <sysproperty key="org.eclipse.jetty.util.log.DEBUG" value="true" />
    </java>
  </target>

  <target name="jar" depends="run-tests" description="Create JAR of compiled sources and resources.">
    <mkdir dir="target" />
    <jar destfile="${slim-jar.file}" index="true">
      <fileset dir="src/main/clojure" />
      <fileset dir="src/main/resources" />
      <fileset dir=".">
        <include name="LICENSE*" />
        <include name="README*" />
      </fileset>
    </jar>
    <jar destfile="${jar.file}" index="true">
      <fileset dir="target/classes" />
      <zipfileset src="target/cascade-${pom.version}-slim.jar" />
    </jar>
  </target>

  <target name="install" depends="jar" description="Install compiled JARs to local Maven repository.">
    <echo>Installing JAR files to local Maven repository.</echo>
    <mvn:install file="${jar.file}" pomrefid="pom">
      <attach file="${slim-jar.file}" classifier="slim" />
    </mvn:install>
  </target>

  <target name="ci-build" depends="clean,compile,install" description="Continous integration build (clean install)" />

  <macrodef name="deploy">
    <attribute name="target-dir" description="Root of Maven repository" />
    <sequential>
      <echo>Deploying JAR files to @{target-dir}.</echo>
      <mvn:deploy file="${jar.file}" pomrefid="pom">
        <attach file="${slim-jar.file}" classifier="slim" />
        <remoteRepository url="file:@{target-dir}" />
      </mvn:deploy>
    </sequential>
  </macrodef>

  <target name="nightly-build" depends="clean,compile,jar" description="Nightly build (clean deploy)">
    <deploy target-dir="/var/www/maven-snapshot-repository" />
  </target>

</project>